import datetime
from langchain_core.messages import SystemMessage, HumanMessage
from utils.rate_limiter import rate_limited_llm_call
from core.vectorstore.retriever import retrieve_documents, get_context_from_documents
from typing import Dict, Optional
from langchain_chroma import Chroma

def create_study_guide_agent(llm, vectorstores: Dict[str, Chroma]):
    """
    Crea un agente especializado en gu√≠as de estudio.
    
    Args:
        llm: Modelo de lenguaje a utilizar
        vectorstores: Diccionario de vectorstores por categor√≠a
    """
    system_prompt = """Eres un agente especializado en CREAR GU√çAS DE ESTUDIO para el sistema educativo chileno.

    DEBES verificar que tengas estos dos datos esenciales:
    1. ASIGNATURA (Lenguaje, Matem√°ticas, Historia, Ciencias, etc.)
    2. NIVEL (Espec√≠fico: 1¬∞ b√°sico, 7¬∞ b√°sico, 2¬∞ medio, etc.)
    3. MES DEL A√ëO ESCOLAR (opcional, pero importante para la progresi√≥n)

    Si falta alguno de los datos esenciales, SOLICITA espec√≠ficamente la informaci√≥n faltante.

    Una vez que tengas los datos, genera una gu√≠a de estudio completa con:
    - Resumen del tema principal
    - Conceptos clave (definiciones claras)
    - Ejemplos resueltos paso a paso
    - Ejercicios de pr√°ctica graduados por dificultad
    - Respuestas o soluciones a los ejercicios propuestos

    CONSIDERACIONES IMPORTANTES:
    - ADAPTA LA DIFICULTAD SEG√öN EL NIVEL EDUCATIVO (1¬∞ b√°sico = 6 a√±os hasta 4¬∞ medio = 18 a√±os)
    - PROGRESI√ìN MENSUAL EJEMPLO: el contenido de abril debe ser m√°s avanzado que marzo y el de mayo m√°s avanzado que abril.
    - Si te solicitan gu√≠as para varios meses, ASEGURA que el material posterior sea m√°s complejo
    - La gu√≠a debe estar alineada con el curr√≠culum nacional y usar lenguaje apropiado para el nivel
    - Los ejercicios deben corresponder al avance esperado seg√∫n el mes del a√±o escolar

    Organiza la gu√≠a con t√≠tulos claros y formato amigable para estudiantes seg√∫n su edad.
    """

    def study_guide_agent_executor(query: str,
                                 asignatura: Optional[str] = None,
                                 nivel: Optional[str] = None,
                                 mes: Optional[str] = None):
        """
        Ejecuta el agente de gu√≠as de estudio.
        
        Args:
            query: Consulta del usuario
            asignatura: Asignatura objetivo
            nivel: Nivel educativo
            mes: Mes del a√±o escolar
        """
        # Verificar que tengamos acceso a los vectorstores necesarios
        required_categories = ["bases curriculares", "actividades sugeridas", "orientaciones", "propuesta"]
        missing_categories = [cat for cat in required_categories if cat not in vectorstores]
        if missing_categories:
            return (f"‚ö†Ô∏è No se encontraron algunas categor√≠as necesarias: {', '.join(missing_categories)}. "
                   "Por favor, verifica la disponibilidad de los documentos.", False, None)

        # Verificar informaci√≥n faltante
        faltante = []
        if not asignatura:
            # Intentar extraer asignatura de la consulta
            extract_prompt = [
                SystemMessage(
                    content="Extrae la asignatura mencionada en esta solicitud. Si no hay ninguna, responde 'No especificada'."),
                HumanMessage(content=query)
            ]
            asignatura_result = rate_limited_llm_call(
                llm.invoke, extract_prompt)
            if "No especificada" in asignatura_result.content:
                faltante.append("asignatura")
            else:
                asignatura = asignatura_result.content.strip()

        if not nivel:
            # Intentar extraer nivel de la consulta
            extract_prompt = [
                SystemMessage(
                    content="Extrae el nivel educativo mencionado en esta solicitud (ej: 5¬∞ b√°sico, 2¬∞ medio). Si no hay ninguno, responde 'No especificado'."),
                HumanMessage(content=query)
            ]
            nivel_result = rate_limited_llm_call(llm.invoke, extract_prompt)
            if "No especificado" in nivel_result.content:
                faltante.append("nivel")
            else:
                nivel = nivel_result.content.strip()
                
        # Si no se ha especificado un mes, usamos el mes actual
        if not mes:
            meses = ["enero", "febrero", "marzo", "abril", "mayo", "junio", 
                    "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
            mes_actual = datetime.datetime.now().month
            mes = meses[mes_actual - 1]
            print(f"\nüìÖ Usando mes actual para gu√≠a de estudio: {mes}")

        # Si falta informaci√≥n, solicitarla
        if faltante:
            response = "Para crear una gu√≠a de estudio completa, necesito la siguiente informaci√≥n:\n\n"
            if "asignatura" in faltante:
                response += "- ¬øPara qu√© asignatura necesitas la gu√≠a? (Lenguaje, Matem√°ticas, etc.)\n"
            if "nivel" in faltante:
                response += "- ¬øPara qu√© nivel educativo? (Ej: 2¬∞ b√°sico, 8¬∞ b√°sico, 3¬∞ medio, etc.)\n"
            return response, True, {"asignatura": asignatura, "nivel": nivel, "mes": mes}

        try:
            # Construir query enriquecida
            enhanced_query = (
                f"gu√≠a de estudio {asignatura} {nivel} {mes} "
                f"conceptos clave ejemplos ejercicios actividades curr√≠culum"
            )

            # Definir prioridad de b√∫squeda por categor√≠as
            priority_categories = ["bases curriculares", "actividades sugeridas", "orientaciones", "propuesta"]
            
            print(f"\nüîç Buscando informaci√≥n relevante en: {', '.join(priority_categories)}")
            
            # Recuperar documentos relevantes
            retrieved_docs = retrieve_documents(
                vectorstores=vectorstores,
                query=enhanced_query,
                categories=priority_categories,
                k=7
            )

            if not retrieved_docs:
                return ("No se encontr√≥ informaci√≥n suficiente en los documentos curriculares. "
                       "Por favor, verifica los criterios de b√∫squeda.", False, None)

            # Extraer contexto y fuentes
            context, sources = get_context_from_documents(retrieved_docs)
            source_text = ", ".join(sources) if sources else "documentos curriculares disponibles"

            print(f"üìö Fuentes consultadas: {source_text}")

            # Generar la gu√≠a
            guide_prompt = [
                SystemMessage(content=system_prompt),
                HumanMessage(content=f"""
                SOLICITUD: {query}
                ASIGNATURA: {asignatura}
                NIVEL: {nivel}
                MES: {mes}

                CONTEXTO CURRICULAR:
                {context}

                FUENTES CONSULTADAS:
                {source_text}

                Por favor, genera una gu√≠a de estudio completa que:
                1. Se adapte al nivel y asignatura espec√≠ficos
                2. Incluya conceptos clave y ejemplos claros
                3. Proporcione ejercicios graduados por dificultad
                4. Se alinee con el curr√≠culum nacional
                5. Sea apropiada para el mes de {mes} en el calendario escolar
                """)
            ]

            response = rate_limited_llm_call(llm.invoke, guide_prompt)
            return response.content, False, {"asignatura": asignatura, "nivel": nivel, "mes": mes}

        except Exception as e:
            print(f"‚ùå Error en study_guide_agent: {e}")
            return ("Ocurri√≥ un error al generar la gu√≠a de estudio. Por favor, intenta nuevamente.",
                   False, None)

    return study_guide_agent_executor